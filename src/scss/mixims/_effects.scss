@mixin underline-hover($thickness, $colour) {
    position: relative;
    &:hover,
    &:focus {
        &:before {
            visibility: visible;
            -webkit-transform: scaleX(1);
            transform: scaleX(1);
        }
    }
    &:before {
        content: "";
        position: absolute;
        height: $thickness;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: $colour;
        visibility: hidden;
        -webkit-transform: scaleX(0);
        transform: scaleX(0);
        @include transition(all 0.3s ease-in-out 0s);
    }
}

@function svg-uri($svg) {
    $encoded: '';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg) / $slice);

    @if not str-index($svg,xmlns) {
        $svg: str-replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');   
    }
  
    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        $chunk: str-replace($chunk, '"', "%22"); // !MODIFIED!
        $chunk: str-replace($chunk, "'", "%27"); // !ADDED!
        $chunk: str-replace($chunk, "/", "%2F"); // !ADDED!
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');
        $chunk: str-replace($chunk, '&', '%26');
        $chunk: str-replace($chunk, '#', '%23');
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }
    @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}


@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}


@mixin corner-borders ($cornerColor: $colour-secondary, $cornerSize: 20, $cornerThickness: 5, $contentFontSize: 16) {
  //   - $cornerSize - just a number in pixels without unit or wit any unit you want 
  //                 - when just a number is provided relative mode i used (will be vconverted into em)
  //                 - when number with unit is absolute mode is turned on (the unit will remain)
  //   - $cornerThickness - just a number in px without unit
  //                      - when just a number is provided relative mode i used (will be vconverted into em)
  //                      - when number with unit is absolute mode is turned on (the unit will remain)
  //   - [$contentFontSize] - used only in relative mode to recalculate previous dimensions into ems for background size
  //                        - just a number in pixels without unit

  $svgCornerSize: strip-unit($cornerSize);
  $svgCornerThickness: strip-unit($cornerThickness);
  $svgViewBox: $svgCornerSize * 2;
  $svgRectStart: $svgCornerThickness / 2;
  $svgRectSize: $svgCornerSize * 2 - $svgCornerThickness;

  // absolute mode
  $borderWidth: $svgCornerThickness * 1px;
  $borderImageWidth: $svgCornerSize * 1px;
  
  // relative mode
  @if unit($cornerSize) == '' or unit($cornerThickness) == '' {
    $borderWidth: $svgCornerThickness/$contentFontSize * 1em;
    $borderImageWidth: $svgCornerSize/$contentFontSize * 1em;
  }

  border-style: solid;
  border-width: $borderWidth;
  border-image-source: svg-uri('<svg viewBox="0 0 #{$svgViewBox} #{$svgViewBox}"><rect x="#{$svgRectStart}" y="#{$svgRectStart}" width="#{$svgRectSize}" height="#{$svgRectSize}" fill="transparent" stroke="#{$cornerColor}" stroke-width="#{$svgCornerThickness}" /></svg>');
  border-image-slice: 50%;
  border-image-width: $borderImageWidth;
}